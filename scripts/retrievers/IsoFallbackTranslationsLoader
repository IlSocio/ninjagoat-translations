import { Dictionary } from "ninjagoat";
import { injectable, inject } from "inversify";
import { ITranslationsConfig, ITranslationsLoader } from "ninjagoat-translations";
import { HttpClient, IHttpClient } from "ninjagoat";

@injectable()
export class IsoFallbackTranslationsLoader implements ITranslationsLoader {
    constructor(
        @inject("HttpClient") private httpClient: IHttpClient,
        @inject("ITranslationsConfig") private config: ITranslationsConfig) {
    }

    load(language: string): Promise<Dictionary<string>> {
        return new Promise((resolve, reject) => {
            this.httpClient
                .get(`${this.config.endpoint}/${language}.json`)
                .map(response => JSON.parse(response.response))
                .subscribe(
                data => {
                    resolve(data);
                },
                ex => {
                    if (!language) {
                        return resolve(this.load("en"));
                    }

                    // checks if the requested language contains the country-code i.e. => fr-BE (french-BELGIUM)
                    if (language.indexOf("-") > 0) {
                        // try to fallback to more general language (by removing country-code), i.e. => fr (french)
                        let genLang = language.split("-")[0];
                        return resolve(this.load(genLang));
                    }

                    if (language == "en") {
                        // if we already falled back to default language (en), then we must reject the promise...
                        // there is no language available...
                        reject("no language available");
                        return;
                    }

                    // fallback to default language (en)
                    // en
                    return resolve(this.load("en"));
                });
        });
    }
}

export default IsoFallbackTranslationsLoader;
