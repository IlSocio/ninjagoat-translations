import { Dictionary } from "ninjagoat";
import { injectable, inject } from "inversify";
import { ITranslationsConfig, ITranslationsLoader } from "ninjagoat-translations";
import { HttpClient, IHttpClient } from "ninjagoat";

export interface ITranslationsConfigFallback extends ITranslationsConfig {
    defaultLanguage: string;
}

@injectable()
export class IsoFallbackTranslationsLoader implements ITranslationsLoader {
    constructor(
        @inject("HttpClient") private httpClient: IHttpClient,
        @inject("ITranslationsConfigFallback") private config: ITranslationsConfigFallback) {
    }

    load(language: string): Promise<Dictionary<string>> {
        if (!language) {
            language = this.config.defaultLanguage;
        }
        return <Promise<Dictionary<string>>>
            this.httpClient
                .get(`${this.config.endpoint}/${language}.json`)
                .toPromise()
                .then(resp => {
                    return JSON.parse(resp.response);
                }, (error: any) => {

                    // checks if the requested language contains the country-code i.e. => fr-BE (french-BELGIUM)
                    if (language.indexOf("-") > 0) {
                        // try to fallback to more general language (by removing country-code), i.e. => fr (french)
                        let genLang = language.split("-")[0];
                        return this.load(genLang);
                    }

                    if (language == this.config.defaultLanguage) {
                        // if we already falled back to default language (en), then we must reject the promise...
                        // there is no language available...
                        throw new Error("no language available");
                    }

                    // fallback to default language (en)
                    return this.load(this.config.defaultLanguage);
                });
    }
}

export default IsoFallbackTranslationsLoader;
